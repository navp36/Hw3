"""
Student information for this assignment:

Replace <FULL NAME> with your name.
On my/our honor, Pranav Pillai and <FULL NAME>, this 
programming assignment is my own work and I have not provided this code to 
any other student.

I have read and understand the course syllabus's guidelines regarding Academic
Integrity. I understand that if I violate the Academic Integrity policy (e.g.
copy code from someone else, have the code generated by an LLM, or give my
code to someone else), the case shall be submitted to the Office of the Dean of
Students. Academic penalties up to and including an F in the course are likely.

UT EID 1: pp25346
UT EID 2:
"""


# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n3(s):
    max_length = 0
    for beg in range(len(s)):
        for end in range(beg,len(s)):
            freq_dict = {}
            valid = True
            for i in range(beg,end+1):
                char = s[i]
                if char not in freq_dict:
                    freq_dict[char] = 0
                freq_dict[char] +=1
                if freq_dict[char] > 1:
                    valid = False           
            if valid:
                current_length = end - beg +1
                max_len = max(max_len, current_length)

    return max_length
    pass


# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n2(s):
    max_length = 0
    for beg in range(len(s)):
        valid = True
        freq_list = [0] * 256
        for end_val in range(beg, len(s)):
            char_index = ord(s[end_val])
            freq_list[char_index] +=1
            if freq_list[char_index] > 1:
                valid = False
            if valid:
                  current_length = end_val - beg + 1
                  max_length = max(current_length, max_length)
    return max_length
    pass


# TODO: implement this function. You may delete this comment when you are done.
def length_of_longest_substring_n(s):
    max_length = 0
    beg = 0
    freq_list = [0] * 256
    for end_val in range(len(s)):
        char_index = ord(s[end_val])
        freq_list[char_index] += 1

        while freq_list[char_index] > 1:
            beg_char_index = ord(s[beg])
            freq_list[beg_char_index] -= 1
            beg += 1

        current_length = end_val - beg + 1
        max_length = max(max_length, current_length)
    return max_length

